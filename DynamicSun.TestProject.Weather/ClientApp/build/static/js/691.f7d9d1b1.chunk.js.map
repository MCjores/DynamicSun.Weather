{"version":3,"file":"static/js/691.f7d9d1b1.chunk.js","mappings":"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","sources":["app/paginatorHook.ts","Components/Paginator.tsx","Components/pages/viewWeatherDatas/TableWeather.tsx","Components/pages/viewWeatherDatas/Filter.tsx","Components/pages/viewWeatherDatas/ViewWeatherDatas.tsx"],"sourcesContent":["import { useMemo } from 'react';\r\nexport const DOTS = -1;\r\n\r\nconst range = (start: number, end: number) => {\r\n  let length = end - start + 1;\r\n  return Array.from({ length }, (_, idx) => idx + start);\r\n};\r\n\r\ninterface IUsePaginator {\r\n  totalCount: number;\r\n  pageSize: number;\r\n  siblingCount: number;\r\n  currentPage: number;\r\n}\r\n\r\nexport const usePagination = ({\r\n  totalCount,\r\n  pageSize,\r\n  siblingCount = 1,\r\n  currentPage,\r\n}: IUsePaginator)=> {\r\n  const paginationRange = useMemo(() => {\r\n    const totalPageCount = Math.ceil(totalCount / pageSize);\r\n\r\n    // Pages count is determined as siblingCount + firstPage + lastPage + currentPage + 2*DOTS\r\n    const totalPageNumbers = siblingCount + 5;\r\n\r\n    /*\r\n      If the number of pages is less than the page numbers we want to show in our\r\n      paginationComponent, we return the range [1..totalPageCount]\r\n    */\r\n    if (totalPageNumbers >= totalPageCount) {\r\n      return range(1, totalPageCount);\r\n    }\r\n\r\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\r\n    const rightSiblingIndex = Math.min(\r\n      currentPage + siblingCount,\r\n      totalPageCount\r\n    );\r\n\r\n    /*\r\n      We do not want to show dots if there is only one position left \r\n      after/before the left/right page count as that would lead to a change if our Pagination\r\n      component size which we do not want\r\n    */\r\n    const shouldShowLeftDots = leftSiblingIndex > 2;\r\n    const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\r\n\r\n    const firstPageIndex = 1;\r\n    const lastPageIndex = totalPageCount;\r\n\r\n    if (!shouldShowLeftDots && shouldShowRightDots) {\r\n      let leftItemCount = 3 + 2 * siblingCount;\r\n      let leftRange = range(1, leftItemCount);\r\n\r\n      return [...leftRange, DOTS, totalPageCount];\r\n    }\r\n\r\n    if (shouldShowLeftDots && !shouldShowRightDots) {\r\n      let rightItemCount = 3 + 2 * siblingCount;\r\n      let rightRange = range(\r\n        totalPageCount - rightItemCount + 1,\r\n        totalPageCount\r\n      );\r\n      return [firstPageIndex, DOTS, ...rightRange];\r\n    }\r\n\r\n    if (shouldShowLeftDots && shouldShowRightDots) {\r\n      let middleRange = range(leftSiblingIndex, rightSiblingIndex);\r\n      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\r\n    }\r\n  }, [totalCount, pageSize, siblingCount, currentPage]);\r\n\r\n  return paginationRange;\r\n};\r\n","import React from 'react';\r\nimport Paginator from 'react-bootstrap/Pagination';\r\nimport { DOTS, usePagination } from 'app/paginatorHook';\r\n\r\ninterface IPaginator {\r\n  onPageChange: (page: number) => void;\r\n  totalCount: number;\r\n  siblingCount?: number;\r\n  currentPage: number;\r\n  pageSize: number;\r\n  className?: string;\r\n}\r\n\r\nconst Pagination = (props: IPaginator) => {\r\n  const {\r\n    onPageChange,\r\n    totalCount,\r\n    siblingCount = 1,\r\n    currentPage,\r\n    pageSize,\r\n    className,\r\n  } = props;\r\n\r\n  const paginationRange = usePagination({\r\n    currentPage,\r\n    totalCount,\r\n    siblingCount,\r\n    pageSize,\r\n  });\r\n\r\n  if (currentPage === 0 || paginationRange!.length < 2) {\r\n    return null;\r\n  }\r\n\r\n  const onNext = () => {\r\n    onPageChange(currentPage + 1);\r\n  };\r\n\r\n  const onPrevious = () => {\r\n    onPageChange(currentPage - 1);\r\n  };\r\n\r\n  let lastPage = paginationRange![paginationRange!.length - 1];\r\n  return (\r\n    <Paginator>\r\n      <Paginator.Prev disabled={currentPage === 1} onClick={onPrevious} />\r\n\r\n      {paginationRange!.map((pageNumber) => {\r\n        if (pageNumber === DOTS) {\r\n          return <Paginator.Ellipsis />;\r\n        }\r\n\r\n        return (\r\n          <Paginator.Item\r\n            active={pageNumber === currentPage}\r\n            onClick={() => onPageChange(pageNumber)}\r\n          >\r\n            {pageNumber}\r\n          </Paginator.Item>\r\n        );\r\n      })}\r\n\r\n      <Paginator.Next onClick={onNext} disabled={currentPage === lastPage} />\r\n    </Paginator>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import { useAppDispatch, useAppSelector } from 'app/hooks';\r\nimport IWeatherData from 'models/Interface/IWeatherData';\r\nimport Pagination from 'Components/Paginator';\r\nimport moment from 'moment';\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport { clearData, getDataAsync } from 'redux/view/viewSlice';\r\nimport './view.css';\r\n\r\nconst pageSize = 10;\r\n\r\nconst TableWeather = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { weatherDatas, filter, status } = useAppSelector(\r\n    (state) => state.view\r\n  );\r\n\r\n  const [viewWeatherDatas, setViewData] = useState<Array<IWeatherData>>([]);\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  const currentTableData = useMemo(() => {\r\n    const firstPageIndex = (currentPage - 1) * pageSize;\r\n    const lastPageIndex = firstPageIndex + pageSize;\r\n    return viewWeatherDatas.slice(firstPageIndex, lastPageIndex);\r\n  }, [currentPage, viewWeatherDatas]);\r\n\r\n  useEffect(() => {\r\n    dispatch(getDataAsync());\r\n\r\n    return () => {\r\n      dispatch(clearData());\r\n    };\r\n  }, []);\r\n\r\n  const withFilter = () => {\r\n    let data = [...weatherDatas];\r\n    //Нет фильтров\r\n    if (!!!(filter.month! + 1) && !!!filter.year) {\r\n    }\r\n\r\n    // по годам\r\n    if (!!!(filter.month! + 1) && filter.year) {\r\n      data = weatherDatas.filter(\r\n        (item) => moment(item.dateTime).year() === filter.year!\r\n      );\r\n    }\r\n\r\n    //по месяцам\r\n    if (filter.month! + 1 && !!!filter.year) {\r\n      data = weatherDatas.filter(\r\n        (item) => moment(item.dateTime).month() === filter.month!\r\n      );\r\n    }\r\n\r\n    //по году и месяцу\r\n    if (filter.month! + 1 && filter.year) {\r\n      data = weatherDatas.filter(\r\n        (item) =>\r\n          moment(item.dateTime).month() === filter.month! &&\r\n          moment(item.dateTime).year() === filter.year!\r\n      );\r\n    }\r\n\r\n    setViewData(sortData(data));\r\n  };\r\n\r\n  const sortData = (data: Array<IWeatherData>): Array<IWeatherData> =>\r\n    data!.sort((a, b) => {\r\n      if (a.dateTime < b.dateTime) return -1;\r\n\r\n      if (a.dateTime > b.dateTime) return 1;\r\n\r\n      return 0;\r\n    });\r\n\r\n  useEffect(() => {\r\n    withFilter();\r\n    setCurrentPage(1);\r\n  }, [filter, weatherDatas]);\r\n\r\n  return (\r\n    <>\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>DateTime</th>\r\n            <th>Temp</th>\r\n            <th>Wet</th>\r\n            <th>Td</th>\r\n            <th>AtmPressure</th>\r\n            <th>WindDirection</th>\r\n            <th>WindSpeed</th>\r\n            <th>Сloudiness</th>\r\n            <th>H</th>\r\n            <th>VV</th>\r\n            <th>Phenomen</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {currentTableData.map((data) => (\r\n            <tr key={data.dateTime}>\r\n              <td>{moment(data.dateTime).format('DD-MM-yyyy HH:mm')}</td>\r\n              <td>{data.temp}</td>\r\n              <td>{data.wet}</td>\r\n              <td>{data.td}</td>\r\n              <td>{data.atmPressure}</td>\r\n              <td>{data.windDirection}</td>\r\n              <td>{data.windSpeed}</td>\r\n              <td>{data.сloudiness}</td>\r\n              <td>{data.h}</td>\r\n              <td>{data.vv}</td>\r\n              <td>{data.phenomen}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n      {currentTableData.length === 0 && (\r\n        <span>\r\n          {status.isError ? 'Ошибка получения данных' : 'Собираю данные...'}\r\n        </span>\r\n      )}\r\n      <Pagination\r\n        className=\"pagination-bar\"\r\n        currentPage={currentPage}\r\n        totalCount={viewWeatherDatas.length}\r\n        pageSize={pageSize}\r\n        onPageChange={(page) => setCurrentPage(page)}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableWeather;\r\n","import { useAppDispatch, useAppSelector } from 'app/hooks';\r\nimport { Button, FormGroup, FormLabel, FormSelect } from 'react-bootstrap';\r\nimport moment from 'moment';\r\nimport { useRef } from 'react';\r\nimport { getDataAsync, setFilter } from 'redux/view/viewSlice';\r\nimport './view.css';\r\n\r\nconst months = [\r\n  'Январь',\r\n  'Февраль',\r\n  'Март',\r\n  'Апрель',\r\n  'Май',\r\n  'Июнь',\r\n  'Июль',\r\n  'Август',\r\n  'Сентябрь',\r\n  'Октябрь',\r\n  'Ноябрья',\r\n  'Декабрь',\r\n];\r\nconst Filter = () => {\r\n  const weatherDatas = useAppSelector((state) => state.view.weatherDatas);\r\n  const statusLoading = useAppSelector((state) => state.view.status);\r\n\r\n  const currMonth = useRef<HTMLSelectElement>(null);\r\n  const currYear = useRef<HTMLSelectElement>(null);\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const uniqYears = () => {\r\n    let years = weatherDatas.map((item) => moment(item.dateTime).year()).sort();\r\n    return Array.from(new Set(years));\r\n  };\r\n\r\n  const acceptFilterHandle = () => {\r\n    //todo применить фильтр\r\n\r\n    const year =\r\n      currYear.current?.value === 'Не выбрано'\r\n        ? undefined\r\n        : Number(currYear.current?.value);\r\n\r\n    const month =\r\n      currMonth.current?.value === 'Не выбрано'\r\n        ? undefined\r\n        : months.indexOf(currMonth.current?.value!);\r\n\r\n    dispatch(\r\n      setFilter({\r\n        year: year,\r\n        month: month,\r\n      })\r\n    );\r\n  };\r\n\r\n  const clearFilterHanlde = () => {\r\n    dispatch(\r\n      setFilter({\r\n        year: undefined,\r\n        month: undefined,\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"view--control\">\r\n      <div className=\"view--control_select\">\r\n        <FormGroup>\r\n          <FormLabel>Год</FormLabel>\r\n          <FormSelect ref={currYear}>\r\n            <option>Не выбрано</option>\r\n            {uniqYears().map((item) => (\r\n              <option key={item}>{item}</option>\r\n            ))}\r\n          </FormSelect>\r\n        </FormGroup>\r\n\r\n        <FormGroup>\r\n          <FormLabel>Месяц</FormLabel>\r\n          <FormSelect ref={currMonth}>\r\n            <option>Не выбрано</option>\r\n            {months.map((item) => (\r\n              <option key={item}>{item}</option>\r\n            ))}\r\n          </FormSelect>\r\n        </FormGroup>\r\n      </div>\r\n      <div className=\"view--control_btns\">\r\n        <div className=\"btns\">\r\n          <Button\r\n            onClick={acceptFilterHandle}\r\n            disabled={statusLoading.isLoading || statusLoading.isError}\r\n          >\r\n            Применить\r\n          </Button>\r\n          <Button\r\n            onClick={clearFilterHanlde}\r\n            disabled={statusLoading.isLoading || statusLoading.isError}\r\n          >\r\n            Все\r\n          </Button>\r\n\r\n          {statusLoading.isError && (\r\n            <Button\r\n              disabled={statusLoading.isLoading}\r\n              onClick={() => dispatch(getDataAsync())}\r\n            >\r\n              Обновить данные\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import TableWeather from './TableWeather';\r\nimport './view.css';\r\nimport Filter from './Filter';\r\n\r\nconst ViewWeatherDatas = () => {\r\n  return (\r\n    <div className=\"view\">\r\n      <Filter />\r\n      <TableWeather />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewWeatherDatas;\r\n"],"names":["DOTS","range","start","end","length","Array","from","_","idx","props","onPageChange","totalCount","siblingCount","currentPage","pageSize","paginationRange","className","useMemo","totalPageCount","Math","ceil","leftSiblingIndex","max","rightSiblingIndex","min","shouldShowLeftDots","shouldShowRightDots","firstPageIndex","lastPageIndex","leftRange","rightRange","middleRange","usePagination","lastPage","disabled","onClick","map","pageNumber","active","dispatch","useAppDispatch","useAppSelector","state","view","weatherDatas","filter","status","useState","viewWeatherDatas","setViewData","setCurrentPage","currentTableData","slice","useEffect","getDataAsync","clearData","sortData","data","sort","a","b","dateTime","month","year","item","moment","withFilter","Table","striped","bordered","hover","format","temp","wet","td","atmPressure","windDirection","windSpeed","сloudiness","h","vv","phenomen","isError","page","months","statusLoading","currMonth","useRef","currYear","FormGroup","FormLabel","FormSelect","ref","years","Set","uniqYears","Button","current","value","undefined","Number","indexOf","setFilter","isLoading"],"sourceRoot":""}